package com.gandreani.lastpass.test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.List;

import org.junit.Test;

import com.gandreani.lastpass.Account;
import com.gandreani.lastpass.Parser;
import com.gandreani.lastpass.Utils;

import de.rtner.misc.BinTools;

public class LastpassTester {

	@Test
	public void testKeyGenerator() {
		HashMap<Integer, String> map = new HashMap<Integer, String>();

		map.put(5,
				"a44f60a1acd2091aa75b0722c5633834726358cbc1e53d7974c85eeae835a598");
		map.put(10,
				"9fd4b44b225dacc7a07811ed931531f0bcdcef023a68697ecb7fee7469957b2f");
		map.put(50,
				"1b023cfe4372d4d8c87dedd9d150197c5efcf77f1456e0a2eb100bdcc241bb1d");
		map.put(100,
				"a6219d4942de1cc5a2052dd024d338e8ce4f218c105c0e9c352d74a4b0775dff");
		map.put(500,
				"39f394bd59d0cc1e2fe3db0d878f8f7702056fd16be7e8d57d64537fe1361a18");
		map.put(1000,
				"cfb09dc252246eed17bdc07ba102299e5ab03467a676b1930660ca9cbf6d68f8");

		for (Integer i : map.keySet()) {
			byte[] generatedKey = Parser.getKey("postlass@gmail.com",
					"pl1234567890", i);
			byte[] testKey = BinTools.hex2bin(map.get(i));
			assertArrayEquals(null, testKey, generatedKey);
		}
	}

	@Test
	public void testHashGenerator() {
		HashMap<Integer, String> map = new HashMap<Integer, String>();

		map.put(5,
				"a95849e029a7791cfc4503eed9ec96ab8675c4a7c4e82b00553ddd179b3d8445");
		map.put(10,
				"0da0b44f5e6b7306f14e92de6d629446370d05afeb1dc07cfcbe25f169170c16");
		map.put(50,
				"1d5bc0d636da4ad469cefe56c42c2ff71589facb9c83f08fcf7711a7891cc159");
		map.put(100,
				"82fc12024acb618878ba231a9948c49c6f46e30b5a09c11d87f6d3338babacb5");
		map.put(500,
				"3139861ae962801b59fc41ff7eeb11f84ca56d810ab490f0d8c89d9d9ab07aa6");
		map.put(1000,
				"03161354566c396fcd624a424164160e890e96b4b5fa6d942fc6377ab613513b");

		for (Integer i : map.keySet()) {
			String generatedHash = Parser.getHash("postlass@gmail.com",
					"pl1234567890", i);
			// I don't know how to assert that two strings are equal while
			// ignoring the case using the Junit functions
			assertTrue(map.get(i).equalsIgnoreCase(generatedHash));
		}
	}

	@Test
	public void testParser() {

		String blob = "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AAACMzIAAAAkNjI2MTZlNjE2ZTYxNzI2NTcwNzU2MjZjNjk2MzJlNjM2ZjZkRVFETgAAABgAAAACMzIAAAAONjc2MTcwMmU2MzZmNmRFUUROAAAAIAAAAAIzMgAAABY2ZjZjNjQ2ZTYxNzY3OTJlNjM2ZjZkRVFETgAAACQAAAACMzIAAAAaNzA2OTcwNjU3MjZjNjk2ZDY1MmU2MzZmNmRFUUROAAAAGgAAAAI0MgAAABA2MjY5NmU2NzJlNjM2ZjZkRVFETgAAACAAAAACNDIAAAAWNjg2Zjc0NmQ2MTY5NmMyZTYzNmY2ZEVRRE4AAAAaAAAAAjQyAAAAEDZjNjk3NjY1MmU2MzZmNmRFUUROAAAAJAAAAAI0MgAAABo2ZDY5NjM3MjZmNzM2ZjY2NzQyZTYzNmY2ZEVRRE4AAAAYAAAAAjQyAAAADjZkNzM2ZTJlNjM2ZjZkRVFETgAAACIAAAACNDIAAAAYNzA2MTczNzM3MDZmNzI3NDJlNmU2NTc0RVFETgAAABwAAAACNTIAAAASNzU2MTMyNjc2ZjJlNjM2ZjZkRVFETgAAABgAAAACNTIAAAAONzU2MTZjMmU2MzZmNmRFUUROAAAAHgAAAAI1MgAAABQ3NTZlNjk3NDY1NjQyZTYzNmY2ZEVRRE4AAAAiAAAAAjgyAAAAGDZmNzY2NTcyNzQ3NTcyNjUyZTYzNmY2ZEVRRE4AAAAcAAAAAjgyAAAAEjc5NjE2ODZmNmYyZTYzNmY2ZEVRRE4AAAAkAAAAAjkyAAAAGjdhNmY2ZTY1NjE2YzYxNzI2ZDJlNjM2ZjZkRVFETgAAACIAAAACOTIAAAAYN2E2ZjZlNjU2YzYxNjI3MzJlNjM2ZjZkRVFETgAAABsAAAADODQyAAAAEDYxNzY2ZjZlMmU2MzZmNmRFUUROAAAAIwAAAAM4NDIAAAAYNzk2Zjc1NzI2MTc2NmY2ZTJlNjM2ZjZkRVFETgAAACwAAAAEMTQ3NAAAACAzMTM4MzAzMDYzNmY2ZTc0NjE2Mzc0NzMyZTYzNmY2ZEVRRE4AAAAqAAAABDE0NzQAAAAeMzgzMDMwNjM2ZjZlNzQ2MTYzNzQ3MzJlNjM2ZjZkVVJVTAAAACgAAAAaNjc2ZjZmNjc2YzY1MmU2MzZmNmQyZjYxMmYAAAABMAAAAAEwVVJVTAAAACQAAAAWNmM2ZjY3NmQ2NTY5NmUyZTYzNmY2ZAAAAAExAAAAATBFTkRNAAAAAk9L";
		byte[] key = Utils
				.decodeBase64String("OfOUvVnQzB4v49sNh4+PdwIFb9Fr5+jVfWRTf+E2Ghg=");

		List<Account> accounts = Parser.parseAccounts(blob, key);

		Account correctFirst = new Account("753975336", "twitter.com", null,
				"http://", "lostpass", "1234567890");
		Account first = accounts.get(0);

		assertTrue(first.equals(correctFirst));
	}

}
